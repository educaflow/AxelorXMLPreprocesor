package {{packageName}};

import com.axelor.inject.Beans;
import com.educaflow.apps.expedientes.common.EventContext;
import com.educaflow.apps.expedientes.common.annotations.OnEnterState;
import com.educaflow.apps.expedientes.common.annotations.WhenEvent;
import com.educaflow.apps.expedientes.db.{{ code }};
import com.educaflow.apps.expedientes.db.TipoExpediente;
import com.educaflow.apps.expedientes.db.Expediente;
import com.educaflow.apps.expedientes.db.repo.{{ code }}Repository;
import com.google.inject.Inject;



public class EventManager extends com.educaflow.apps.expedientes.common.EventManager<{{ code }}, {{ code }}.Estado, {{ code }}.Evento,{{ code }}.Profile> {

    private final {{ code }}Repository repository;

    @Inject
    public EventManager({{ code }}Repository repository) {
        super({{ code }}.class, {{ code }}.Estado.class, {{ code }}.Evento.class,{{ code }}.Profile.class);
        this.repository = repository;
    }

    @Override
    public Expediente triggerInitialEvent(TipoExpediente tipoExpediente, EventContext eventContext) {

        {{ code }} {{ lowerCode }} = new {{ code }}();
        {{ lowerCode }}.setTipoExpediente(tipoExpediente);
        //{{ lowerCode }}.updateState({{ code }}.Estado.);


        return {{ lowerCode }};
    }


{% for event in caseEvents %}

{% include "event-manager-trigger-method.template" %}

{% endfor %}



    @WhenEvent
    public void triggerDelete({{ code }} {{ lowerCode }}, {{ code }} original, EventContext eventContext) {

    }

    @WhenEvent
    public void triggerExit({{ code }} {{ lowerCode }}, {{ code }} original, EventContext eventContext) {

    }


{% for state in caseStates %}

{% include "event-manager-onenter-method.template" %}

{% endfor %}








}